Command > CRTCMOD SRCSTMF('src/loadpgm.c') MODULE(NOXDBUTF8/loadpgm) OPTIMIZE(10) ENUM(*INT) TERASPACE(*YES) STGMDL(*INHERIT) SYSIFCOPT(*IFSIO) DBGVIEW(*ALL) TGTRLS(V7R3M0) OPTION(*EVENTF) OUTPUT(*PRINT) INCDIR('/QIBM/include' 'include' 'ext/include') <
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           1
                                                 * * * * *   P R O L O G   * * * * *
  Module  . . . . . . . . . . . . :   LOADPGM
    Library . . . . . . . . . . . :      NOXDBUTF8
  Source stream file  . . . . . . :   src/loadpgm.c
  Text description  . . . . . . . :
  Output options:
    Output file . . . . . . . . . :   *PRINT
    Title . . . . . . . . . . . . :   *BLANK
    Subtitle  . . . . . . . . . . :   *BLANK
  Compiler options  . . . . . . . :   *NOFULL  *SHOWSRC  *NOSHOWSYS  *NOSHOWUSR  *NOSHOWINC  *NOEXPMAC
                                      *NOSECLVL  *SHOWSKP  *DIGRAPH  *NOAGR  *NOSTRUCREF  *NOXREF  *NOXREFREF
                                      *EVENTF  *LOGMSG  *NOSTDLOGMSG  *NOSYSINCPATH  *STDINC  *NOINCDIRFIRST  *GEN  *NOPPONLY
  Checkout options  . . . . . . . :   *NOCOND  *NOEFFECT  *NOGENERAL  *NOPARM  *NOPORT  *NOREACH  *NOTRUNC  *NOUNUSED
                                      *NOGOTO  *NOINIT  *NOCONST  *NOENUM  *NOPPCHECK  *NOPPTRACE  *NOEXTERN
  Optimization  . . . . . . . . . :   10
  Inline options:
    Inliner . . . . . . . . . . . :   *OFF
    Mode  . . . . . . . . . . . . :   *AUTO
    Threshold . . . . . . . . . . :   250
    Limit . . . . . . . . . . . . :   2000
    Report  . . . . . . . . . . . :   *NO
  Module creation options . . . . :   *NOKEEPILDTA
  Debugging view  . . . . . . . . :   *ALL
  Debug encryption key  . . . . . :   *NONE
  Define names  . . . . . . . . . :   *NONE
  Language level  . . . . . . . . :   *EXTENDED
  Alias . . . . . . . . . . . . . :   *ANSI
  System interface options  . . . :   *IFSIO  *NOASYNCSIGNAL
  Locale object type  . . . . . . :   *LOCALE
  Message flagging level  . . . . :   0
  Compiler messages:
    Message limit . . . . . . . . :   *NOMAX
    Message limit severity  . . . :   30
  Replace module object . . . . . :   *YES
  Authority . . . . . . . . . . . :   *LIBCRTAUT
  Target release  . . . . . . . . :   V7R3M0
  Performance collection  . . . . :   *PEP
  Performance options . . . . . . :   *SETFPCA  *NOSTRDONLY
  Profiling data  . . . . . . . . :   *NOCOL
  Teraspace options . . . . . . . :   *YES  *NOTSIFC
  Storage model . . . . . . . . . :   *INHERIT
  Data model  . . . . . . . . . . :   *P128
  Preprocessor generation options :   *NONE
  Include directory . . . . . . . :   /QIBM/include
                                      include
                                      ext/include
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           2
  Pack structure  . . . . . . . . :   *NATURAL
  Enum size . . . . . . . . . . . :   *INT
  Dependency information  . . . . :   *NONE
  Default char type . . . . . . . :   *UNSIGNED
  Compiler services option  . . . :   *BLANK
  Licensed internal code options  :   *BLANK
  Target CCSID  . . . . . . . . . :   *SOURCE
  Decimal float round mode  . . . :   *HALFEVEN
  Last change . . . . . . . . . . :   06-09-25 22:05:03
  Source description  . . . . . . :
  Compiler  . . . . . . . . . . . :   IBM ILE C compiler
                                          * * * * *   E N D   O F   P R O L O G   * * * * *
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           3
                                                 * * * * *   S O U R C E   * * * * *
  LINE  STMT                                                                                                       SEQNBR INCNO
              *...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9........
     1       |// CMD:CRTCMOD                                                                                    |      1
     2       |/* ------------------------------------------------------------- */                               |      2
     3       |/* SYSIFCOPT(*IFSIO) OPTION(*EXPMAC *SHOWINC)                    */                               |      3
     4       |/* Program . . . : CALLsRVPGM                                    */                               |      4
     5       |/* Date  . . . . : 14.06.2012                                    */                               |      5
     6       |/* Design  . . . : Niels Liisberg                                */                               |      6
     7       |/* Function  . . : Load service program and procedures           */                               |      7
     8       |/*                                                               */                               |      8
     9       |/* By     Date       Task    Description                         */                               |      9
    10       |/* NL     14.06.2012         New module                          */                               |     10
    11       |/* ------------------------------------------------------------- */                               |     11
    12       |#include <QLEAWI.h>                                                                               |     12
    13       |#include <signal.h>                                                                               |     13
    14       |#include <mih/stsppo.h>                                                                           |     14
    15       |#include <mih/setsppo.h>                                                                          |     15
    16       |#include <mih/MIDTTM.h>                                                                           |     16
    17       |#include <mih/matptr.h>                                                                           |     17
    18       |#include <qwtsetp.h>                                                                              |     18
    19       |#include <miptrnam.h>                                                                             |     19
    20       |#include <qsygetph.h>                                                                             |     20
    21       |#include <qbnrpii.h>                                                                              |     21
    22       |#include <mih/callpgmv.h>                                                                         |     22
    23       |#include <errno.h>                                                                                |     23
    24       |#include <stdio.h>                                                                                |     24
    25       |                                                                                                  |     25
    26       |#include "ostypes.h"                                                                              |     26
    27       |#include "apierr.h"                                                                               |     27
    28       |#include "parms.h"                                                                                |     28
    29       |#include "trycatch.h"                                                                             |     29
    30       |#include "utl100.h"                                                                               |     30
 ===========> .........a........................................................................................
 *=SEVERE==========> a - CZM0296  #include file "utl100.h" not found.
    31       |#include "mem001.h"                                                                               |     31
 ===========> .........a........................................................................................
 *=SEVERE==========> a - CZM0296  #include file "mem001.h" not found.
    32       |                                                                                                  |     32
    33       |#include "jsonxml.h"                                                                              |     33
 ===========> .........a........................................................................................
 *=SEVERE==========> a - CZM0296  #include file "jsonxml.h" not found.
    34       |                                                                                                  |     34
    35       |extern UCHAR BraBeg;                                                                              |     35
    36       |extern UCHAR BraEnd;                                                                              |     36
    37       |extern UCHAR Masterspace;                                                                         |     37
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           4
    38       |                                                                                                  |     38
    39       |//  local prototype:                                                                              |     39
    40       |static void  copyNodeIntoBuffer (PUCHAR pParmBuffer ,PJXPARMMETA pParentMeta , PJXPARMMETA pMeta,\|     40
 ===========> .....................................................a............................................
 *=SEVERE==========> a - CZM0046  Syntax error.
    40       | PNOXNODE pParmValueNode );                                                                       |     40
    41       |                                                                                                  |     41
    42       |                                                                                                  |     42
    43       |// -------------------------------------------------------------                                  |     43
    44       |void getLibraryForSysPtr (_SYSPTR proc, UCHAR * lib)                                              |     44
    45       |{                                                                                                 |     45
    46       |   _MPTR_Template_T op;                                                                           |     46
    47     1 |   op.Obj_Ptr.Template_Size = sizeof(op);                                                         |     47
    48     2 |   matptr (&op, proc);                                                                            |     48
    49     3 |   memcpy (lib , &op.Obj_Ptr.Library_ID.Name , 10);                                               |     49
    50       |}                                                                                                 |     50
    51       |                                                                                                  |     51
    52       |/* ------------------------------------------------------------- */                               |     52
    53       |_SYSPTR nox_loadServiceProgram (PUCHAR lib , PUCHAR srvPgm)                                       |     53
    54       |{                                                                                                 |     54
    55       |   UCHAR srvPgm_  [11];                                                                           |     55
    56       |   UCHAR lib_     [11];                                                                           |     56
    57       |   _SYSPTR pgm;                                                                                   |     57
    58       |                                                                                                  |     58
    59     1 |   sprintf(srvPgm_ ,"%-10.10s", srvPgm);                                                          |     59
    60     2 |   sprintf(lib_    ,"%-10.10s", lib);                                                             |     60
    61       |                                                                                                  |     61
    62     3 |   try {                                                                                          |     62
    63     4 |      pgm = rslvsp(WLI_SRVPGM , srvPgm_  , lib_  , _AUTH_OBJ_MGMT);                               |     63
    64       |   }                                                                                              |     64
    65     5 |   catch (NULL) {                                                                                 |     65
    66     6 |      pgm = NULL;                                                                                 |     66
    67       |   }                                                                                              |     67
    68     7 |   return pgm;                                                                                    |     68
    69       |}                                                                                                 |     69
    70       |/* ------------------------------------------------------------- */                               |     70
    71       |_SYSPTR nox_loadProc (_SYSPTR srvPgm ,  PUCHAR procName)                                          |     71
    72       |{                                                                                                 |     72
    73       |   _SYSPTR proc;                                                                                  |     73
    74       |   int type;                                                                                      |     74
    75       |   APIERR  apierr;                                                                                |     75
    76       |   UINT64 mark;                                                                                   |     76
    77     1 |   int expNo = 0;                                                                                 |     77
    78     2 |   int expLen = 0;                                                                                |     78
    79       |   int i;                                                                                         |     79
    80       |   int acInfoLen;                                                                                 |     80
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           5
    81       |   Qle_ABP_Info_t acinfo;                                                                         |     81
    82       |   Qus_EC_t       ec;                                                                             |     82
    83       |                                                                                                  |     83
    84     3 |   if (srvPgm == NULL) return NULL;                                                               |     84
    85       |                                                                                                  |     85
    86     5 |   ec.Bytes_Provided = sizeof(ec);                                                                |     86
    87     6 |   apierr.size = sizeof(apierr);                                                                  |     87
    88     7 |   acInfoLen = sizeof(acinfo);                                                                    |     88
    89     8 |   QleActBndPgmLong(&srvPgm, &mark , &acinfo , &acInfoLen , &ec);                                 |     89
    90     9 |   proc = QleGetExpLong(&mark , &expNo  , &expLen , procName , &proc , &type , &ec);              |     90
    91    10 |   return proc;                                                                                   |     91
    92       |}                                                                                                 |     92
    93       |/* ------------------------------------------------------------- */                               |     93
    94       |_SYSPTR nox_loadServiceProgramProc (PUCHAR lib , PUCHAR srvPgm, PUCHAR procName)                  |     94
    95       |{                                                                                                 |     95
    96     1 |    _SYSPTR pgm = nox_loadServiceProgram (lib , srvPgm);                                          |     96
    97     2 |    return nox_loadProc (pgm, procName);                                                          |     97
    98       |}                                                                                                 |     98
    99       |/* ------------------------------------------------------------- */                               |     99
   100       |_SYSPTR nox_loadProgram (PUCHAR lib , PUCHAR pgm)                                                 |    100
   101       |{                                                                                                 |    101
   102       |   UCHAR pgm_  [11];                                                                              |    102
   103       |   UCHAR lib_  [11];                                                                              |    103
   104       |   _SYSPTR pPgm;                                                                                  |    104
   105       |                                                                                                  |    105
   106     1 |   sprintf(pgm_ , "%-10.10s" , pgm);                                                              |    106
   107     2 |   sprintf(lib_ , "%-10.10s" , lib);                                                              |    107
   108       |                                                                                                  |    108
   109     3 |   try {                                                                                          |    109
   110     4 |      pPgm = rslvsp(WLI_PGM , pgm_  , lib_  , _AUTH_OBJ_MGMT);                                    |    110
   111       |   }                                                                                              |    111
   112     5 |   catch (NULL) {                                                                                 |    112
   113     6 |      pPgm = NULL;                                                                                |    113
   114       |   }                                                                                              |    114
   115     7 |   return pPgm;                                                                                   |    115
   116       |}                                                                                                 |    116
   117       |/* ------------------------------------------------------------- */                               |    117
   118       |#pragma conver(1252)                                                                              |    118
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   119       |static void convertDate ( PUCHAR pOut, PUCHAR pIn , PUCHAR pFormat )                              |    119
   120       |{                                                                                                 |    120
   121     1 |   if (0 == strcmp ( pFormat , "ISO")) {                                                          |    121
   122     2 |      strcpy(pOut, pIn); // noxDb is always in ISO                                                |    122
   123     3 |   } else if (0 == strcmp ( pFormat , "EUR")) { // YYYY-MM-DD to DD/MM/YYYY                       |    123
   124     4 |      strcpy (pOut , "0001-01-01");                                                               |    124
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           6
   125     5 |      memcpy ( pOut + 6 , pIn +0 , 4); // YYYY                                                    |    125
   126     6 |      memcpy ( pOut + 3 , pIn +5 , 2); // MM                                                      |    126
   127     7 |      memcpy ( pOut + 0 , pIn +8 , 2); // DD                                                      |    127
   128       |   } // todo  - more to come                                                                      |    128
   129       |   else {                                                                                         |    129
   130     8 |      strcpy ( pOut , pFormat); // Abbend !!                                                      |    130
   131       |   }                                                                                              |    131
   132       |}                                                                                                 |    132
   133       |#pragma conver(0)                                                                                 |    133
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   134       |/* ------------------------------------------------------------- */                               |    134
   135       |#pragma conver(1252)                                                                              |    135
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   136       |static PUCHAR fmtDate ( PUCHAR pOut, PUCHAR pIn , PUCHAR pFormat )                                |    136
   137       |{                                                                                                 |    137
   138     1 |   if (0 == strcmp ( pFormat , "ISO")) {                                                          |    138
   139     2 |      substr (pOut, pIn , 10 ); // noxDb is always in ISO                                         |    139
   140     3 |   } else if (0 == strcmp ( pFormat , "EUR")) { // DD/MM/YYYY to YYYY-MM-DD                       |    140
   140     3 +   } else if (0 == (__strcmp((pFormat),("EUR")))) { // DD/MM/YYYY to YYYY-MM-DD                   +    140
 ===========> ......a...........................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "substr".
   141     4 |      memcpy ( pOut + 0 , pIn +6 , 4); // YYYY                                                    |    141
   142     5 |      memcpy ( pOut + 5 , pIn +3 , 2); // MM                                                      |    142
   143     6 |      memcpy ( pOut + 8 , pIn +0 , 2); // DD                                                      |    143
   144     7 |      pOut[2] = pOut[5] = '-';                                                                    |    144
   145     8 |      pOut[10] = '\0';                                                                            |    145
   146       |   } // todo  - more to come                                                                      |    146
   147       |   else {                                                                                         |    147
   148     9 |      substr (pOut, pIn , 10 ); // noxDb is always in ISO                                         |    148
   149       |   }                                                                                              |    149
 ===========> ......a...........................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "substr".
   150    10 |   return pOut;                                                                                   |    150
   151       |}                                                                                                 |    151
   152       |#pragma conver(0)                                                                                 |    152
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   153       |/* ------------------------------------------------------------- */                               |    153
   154       |#pragma conver(1252)                                                                              |    154
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   155       |static PUCHAR fmtTime ( PUCHAR pOut, PUCHAR pIn )                                                 |    155
   156       |{                                                                                                 |    156
   157     1 |   substr  (pOut , pIn , 8);                                                                      |    157
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           7
   158     2 |   pOut[2] = pOut[5] = '.';                                                                       |    158
 ===========> ...a..............................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "substr".
   159     3 |   return pOut;                                                                                   |    159
   160       |}                                                                                                 |    160
   161       |#pragma conver(0)                                                                                 |    161
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   162       |/* ------------------------------------------------------------- */                               |    162
   163       |#pragma conver(1252)                                                                              |    163
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   164       |static UCHAR convertSeperator (PUCHAR pSeprator)                                                  |    164
   165       |{                                                                                                 |    165
   166     1 |   if (pSeprator == NULL) {                                                                       |    166
   167     2 |      return '\0';                                                                                |    167
   168     3 |   } else if (0 == strcmp ( pSeprator , "hyphen")) {                                              |    168
   169     4 |      return '-';                                                                                 |    169
   170     5 |   } else if (0 == strcmp ( pSeprator , "period")) {                                              |    170
   171     6 |      return '.';                                                                                 |    171
   172     7 |   } else if (0 == strcmp ( pSeprator , "slash")) {                                               |    172
   173     8 |      return '/';                                                                                 |    173
   174     9 |   } else if (0 == strcmp ( pSeprator , "blank")) {                                               |    174
   175    10 |      return ' ';                                                                                 |    175
   176       |   } else {                                                                                       |    176
   177    11 |      return '-'; // default !!                                                                   |    177
   178       |   }                                                                                              |    178
   179       |}                                                                                                 |    179
   180       |#pragma conver(0)                                                                                 |    180
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   181       |/* ------------------------------------------------------------- */                               |    181
   182       |static PUCHAR parmMetaValue (PNOXNODE pNode , PUCHAR key)                                         |    182
   183       |{                                                                                                 |    183
 ===========> ......................................a.......b...................................................
 *=SEVERE==========> a - CZM0275  Unexpected text pNode encountered.
 *=SEVERE==========> b - CZM0275  Unexpected text PUCHAR encountered.
   184       |   PUCHAR value = nox_GetAttrValuePtr ( nox_AttributeLookup (  pNode, key));                      |    184
   185     1 |   if (value) {                                                                                   |    185
 ===========> ................d.c.....................a......................b..................................
 *=WARNING=========> a - CZM0304  No function prototype given for "nox_AttributeLookup".
 *=SEVERE==========> b - CZM0045  Undeclared identifier pNode.
 *=WARNING=========> c - CZM0304  No function prototype given for "nox_GetAttrValuePtr".
 *=SEVERE==========> d - CZM0196  Initialization between types "unsigned char*" and "int" is not allowed.
   186     2 |      return value;                                                                               |    186
   187       |   } else {                                                                                       |    187
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           8
   188     3 |      return "";                                                                                  |    188
   189       |   }                                                                                              |    189
   190       |}                                                                                                 |    190
   191       |/* ------------------------------------------------------------- */                               |    191
   192       |static int  parmMetaValueInt (PNOXNODE pNode , PUCHAR key, int dftvalue)                          |    192
   193       |{                                                                                                 |    193
 ===========> .......................................a.......b...........c......................................
 *=SEVERE==========> a - CZM0275  Unexpected text pNode encountered.
 *=SEVERE==========> b - CZM0275  Unexpected text PUCHAR encountered.
 *=SEVERE==========> c - CZM0275  Unexpected text 'int' encountered.
   194       |   PUCHAR value = nox_GetAttrValuePtr ( nox_AttributeLookup (  pNode, key));                      |    194
   195     1 |   if (value) {                                                                                   |    195
 ===========> ................d.c.....................a......................b..................................
 *=WARNING=========> a - CZM0304  No function prototype given for "nox_AttributeLookup".
 *=SEVERE==========> b - CZM0045  Undeclared identifier pNode.
 *=WARNING=========> c - CZM0304  No function prototype given for "nox_GetAttrValuePtr".
 *=SEVERE==========> d - CZM0196  Initialization between types "unsigned char*" and "int" is not allowed.
   196     2 |      return atoi(value);                                                                         |    196
   197       |   } else {                                                                                       |    197
 ===========> .............a....................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "atoi".
   198     3 |      return dftvalue;                                                                            |    198
   199       |   }                                                                                              |    199
   200       |}                                                                                                 |    200
   201       |/* ------------------------------------------------------------- */                               |    201
   202       |static int min(int a, int b)                                                                      |    202
   203       |{                                                                                                 |    203
   204     1 |   return (a<b) ? a : b;                                                                          |    204
   205       |}                                                                                                 |    205
   206       |/* ------------------------------------------------------------- */                               |    206
   207       |#pragma conver(1252)                                                                              |    207
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   208       |static PJXPARMMETA getParmDefinition( PNOXNODE pNode)                                             |    208
   209       |{                                                                                                 |    209
 ===========> .......a...........b..............................................................................
 *=SEVERE==========> a - CZM0166  Definition of function PJXPARMMETA requires parentheses.
 *=SEVERE==========> b - CZM0276  Syntax error: possible missing '{'?
   210     2 |   return (PJXPARMMETA) nox_GetNodeAttrValuePtr  (pNode , "def" , NULL);                          |    210
   211       |}                                                                                                 |    211
 ===========> ..........a..................................................................b....................
 *=SEVERE==========> a - CZM0045  Undeclared identifier PJXPARMMETA.
 *=SEVERE==========> b - CZM0275  Unexpected text ')' encountered.
   212       |#pragma conver(0)                                                                                 |    212
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page           9
   213       |/* ------------------------------------------------------------- */                               |    213
   214       |#pragma conver(1252)                                                                              |    214
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   215       |static void copyValueIntoBuffer(PUCHAR pBuf, PJXPARMMETA pMethodParm , PUCHAR  pValue )           |    215
   216       |{                                                                                                 |    216
 ===========> .............................................a....................................................
 *=SEVERE==========> a - CZM0046  Syntax error.
   217       |                                                                                                  |    217
   218     1 |   switch (pMethodParm->dType) {                                                                  |    218
   219       |      case NOX_DTYPE_CHAR: {                                                                      |    219
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier pMethodParm.
   220       |         // Boolean Hack for backwards compability (PCML-V7)                                      |    220
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_CHAR.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   221     2 |         if (pMethodParm->length == 1 && (0 == strcmp(pValue, "false") || 0 == strcmp(pValue, "tr\|    221
   221       |ue"))) {                                                                                          |    221
   222     3 |            *(PUCHAR) pBuf = (*pValue == 'f') ? '0' : '1';                                        |    222
   223       |         } else {                                                                                 |    223
   224     4 |            padncpy ( pBuf, pValue , pMethodParm->length);                                        |    224
   225       |         }                                                                                        |    225
   226     5 |         break;                                                                                   |    226
 ===========> ............a.....................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "padncpy".
   227       |      }                                                                                           |    227
   228       |      case NOX_DTYPE_VARCHAR: {                                                                   |    228
   229     6 |         ULONG actlen = min(strlen (pValue), pMethodParm->length);                                |    229
   230     7 |         if (pMethodParm->precision == 4) {                                                       |    230
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_VARCHAR.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   231     8 |            *(PULONG)  pBuf = actlen;                                                             |    231
   232       |         } else {                                                                                 |    232
   233     9 |            *(PUSHORT) pBuf = actlen;                                                             |    233
   234       |         }                                                                                        |    234
   235    10 |         memcpy ( pBuf + pMethodParm->precision, pValue , actlen); // include the zero term       |    235
   236    11 |         break;                                                                                   |    236
   237       |      }                                                                                           |    237
   238       |                                                                                                  |    238
   239       |      case NOX_DTYPE_INT: {                                                                       |    239
   240    12 |         str2integerMem ( pBuf  , pValue , pMethodParm->length, pMethodParm->precision);          |    240
   241    13 |         break;                                                                                   |    241
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_INT.
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          10
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   242       |      }                                                                                           |    242
 ===========> .........a........................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "str2integerMem".
   243       |      case NOX_DTYPE_BYTE: {                                                                      |    243
   244    14 |         *(PUCHAR) pBuf = atoi (pValue);                                                          |    244
   245    15 |         break;                                                                                   |    245
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_BYTE.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   246       |      }                                                                                           |    246
 ===========> ..........................a.......................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "atoi".
   247       |      case NOX_DTYPE_PACKED: {                                                                    |    247
   248    16 |         str2packedMem ( pBuf  , pValue , pMethodParm->length, pMethodParm->precision);           |    248
   249    17 |         break;                                                                                   |    249
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_PACKED.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   250       |      }                                                                                           |    250
 ===========> .........a........................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "str2packedMem".
   251       |      case NOX_DTYPE_ZONED: {                                                                     |    251
   252    18 |         str2zonedMem ( pBuf , pValue , pMethodParm->length, pMethodParm->precision);             |    252
   253    19 |         break;                                                                                   |    253
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_ZONED.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   254       |      }                                                                                           |    254
 ===========> .........a........................................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "str2zonedMem".
   255       |      case NOX_DTYPE_DATE: {                                                                      |    255
   256    20 |         convertDate  ( pBuf , pValue , pMethodParm->format);                                     |    256
   257    21 |         break;                                                                                   |    257
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_DATE.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   258       |      }                                                                                           |    258
   259       |      case NOX_DTYPE_TIME: {                                                                      |    259
   260    22 |         memcpy ( pBuf , "00.00.00", 8);                                                          |    260
   261    23 |         memcpy ( pBuf , pValue , min(strlen(pValue), pMethodParm->length));                      |    261
   261    23 +         (__memcpy((pBuf),(pValue),(min((__strlen(pValue)), pMethodParm->length))));              +    261
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_TIME.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   262    24 |         break;                                                                                   |    262
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          11
   263       |      }                                                                                           |    263
   264       |      case NOX_DTYPE_TIME_STAMP: {                                                                |    264
   265    25 |         memcpy ( pBuf , "0001-01-01-00.00.00.000000000", pMethodParm->length);                   |    265
   266    26 |         memcpy ( pBuf , pValue , min(strlen(pValue), pMethodParm->length));                      |    266
   266    26 +         (__memcpy((pBuf),(pValue),(min((__strlen(pValue)), pMethodParm->length))));              +    266
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_TIME_STAMP.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   267    27 |         break;                                                                                   |    267
   268       |      }                                                                                           |    268
   269       |      case NOX_DTYPE_BOOL: {                                                                      |    269
   270    28 |         *(PUCHAR) pBuf = (*pValue == '\0' || *pValue == '0' || *pValue == 'f') ? '0' : '1';      |    270
   271    29 |         break;                                                                                   |    271
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_BOOL.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   272       |      }                                                                                           |    272
   273       |      case NOX_DTYPE_UNKNOWN: {                                                                   |    273
   274    30 |         break;                                                                                   |    274
   275       |      }                                                                                           |    275
 ===========> ...........a......................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier NOX_DTYPE_UNKNOWN.
 *=SEVERE==========> a - CZM0051  Case expression must be a valid integral constant.
   276       |   }                                                                                              |    276
   277       |}                                                                                                 |    277
   278       |#pragma conver(0)                                                                                 |    278
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   279       |// ---------------------------------------------------------------------------------------        |    279
   280       |#pragma conver(1252)                                                                              |    280
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   281       |static void  copyNodeValueIntoBuffer (PUCHAR pParmBuffer, PJXPARMMETA pDef, PNOXNODE pValueNode)  |    281
   282       |{                                                                                                 |    282
   283       |   PUCHAR pValue  = nox_GetValuePtr   (pValueNode , pDef->name , "");                             |    283
 ===========> ..........................................................a.......................................
 *=SEVERE==========> a - CZM0046  Syntax error.
   284     1 |   copyValueIntoBuffer (pParmBuffer, pDef,  pValue );                                             |    284
   285       |}                                                                                                 |    285
 ===========> ....................b..................c............a.............................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier pDef.
 *=WARNING=========> b - CZM0304  No function prototype given for "nox_GetValuePtr".
 *=SEVERE==========> c - CZM0045  Undeclared identifier pValueNode.
   286       |#pragma conver(0)                                                                                 |    286
 ===========> b...........................................a.....................................................
 *=SEVERE==========> a - CZM0099  Unexpected argument.
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          12
 *=WARNING=========> b - CZM0224  Incorrect pragma ignored.
   287       |// ---------------------------------------------------------------------------------------        |    287
   288       |// name suffix is ___ then it is Anonymous Array                                                  |    288
   289       |#pragma conver(1252)                                                                              |    289
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   290       |static BOOL isAnonymousArray (PUCHAR name) {                                                      |    290
   291     1 |   int l = strlen(name);                                                                          |    291
   292     2 |   return (l > 3 && 0==memcmp(name + l -3 ,"___", 3 ));                                           |    292
   293       |}                                                                                                 |    293
   294       |#pragma conver(0)                                                                                 |    294
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   295       |// ---------------------------------------------------------------------------------------        |    295
   296       |static void  copyNodeIntoBuffer (PUCHAR pParmBuffer , PJXPARMMETA pParentMeta , PJXPARMMETA pMeta\|    296
   296       | ,  PNOXNODE pParmValueNode )                                                                     |    296
   297       |{                                                                                                 |    297
   298       |                                                                                                  |    298
 ===========> ......................................................a...........................................
 *=SEVERE==========> a - CZM0046  Syntax error.
   299     1 |   if (pMeta->dim > 0 ) {                                                                         |    299
   300     2 |      PNOXNODE pArray =  isAnonymousArray (pMeta->name) ? pParmValueNode :nox_GetNode   (pParmVal\|    300
   300       |ueNode , pMeta->name);                                                                            |    300
   301     3 |      PNOXNODE pArrayElement = nox_GetNodeChild (pArray);                                         |    301
   302     4 |      if (pMeta->pStructure) {                                                                    |    302
 ===========> .......a..........................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier pMeta.
   303     5 |         PNOXNODE pStructObj = nox_GetNodeChild (pMeta->pStructure);                              |    303
 ===========> ......b........a..................................................................................
 *=SEVERE==========> a - CZM0277  Syntax error: possible missing ';' or ','?
 *=SEVERE==========> b - CZM0045  Undeclared identifier PNOXNODE.
   304     6 |         PJXPARMMETA pDef = getParmDefinition (pStructObj);                                       |    304
   305     7 |         for (int i=0; i < pMeta->dim ; i++) {                                                    |    305
   306     9 |            copyNodeIntoBuffer(pParmBuffer, pMeta , pDef ,  pArrayElement);                       |    306
   307    10 |            pParmBuffer += pMeta->size;                                                           |    307
 ===========> ..................a...............................................................................
 *=SEVERE==========> a - CZM0277  Syntax error: possible missing ';' or ','?
   308    11 |            pArrayElement = nox_GetNodeNext(pArrayElement);                                       |    308
 ===========> .........a........................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier PJXPARMMETA.
   309       |         }                                                                                        |    309
   310       |      } else {                                                                                    |    310
 ===========> ....................................................a.......b.....................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier pDef.
 *=SEVERE==========> b - CZM0045  Undeclared identifier pArrayElement.
   311    13 |         for (int i=0; i < pMeta->dim ; i++) {                                                    |    311
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          13
   312       |            PUCHAR pValue  = nox_GetNodeValuePtr  (pArrayElement , "");                           |    312
 ===========> ............................a.....................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "nox_GetNodeNext".
   313    15 |            copyValueIntoBuffer(pParmBuffer, pMeta ,  pValue );                                   |    313
   314    16 |            pParmBuffer += pMeta->size;                                                           |    314
   315    17 |            pArrayElement = nox_GetNodeNext(pArrayElement);                                       |    315
   316       |         }                                                                                        |    316
 ===========> ...........................b.a....................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "nox_GetNodeValuePtr".
 *=SEVERE==========> b - CZM0196  Initialization between types "unsigned char*" and "int" is not allowed.
   317       |      }                                                                                           |    317
 ===========> ......................................................a...........................................
 *=SEVERE==========> a - CZM0099  Unexpected argument.
   318    19 |   } else if (pMeta->pStructure) {                                                                |    318
   319    20 |      PNOXNODE pValueNode = nox_GetNode ( pParmValueNode , pMeta->name);                          |    319
 ===========> ............................a.....................................................................
 *=WARNING=========> a - CZM0304  No function prototype given for "nox_GetNodeNext".
   320    21 |      PNOXNODE pMetaElements = nox_GetNodeChild (pMeta->pStructure);                              |    320
   321    22 |      while (pMetaElements) {                                                                     |    321
   322       |         PJXPARMMETA pDef = getParmDefinition (pMetaElements);                                    |    322
   323       |         if (pDef->pStructure) {                                                                  |    323
 ===========> ...............a..................................................................................
 *=SEVERE==========> a - CZM0277  Syntax error: possible missing ';' or ','?
   324       |            copyNodeIntoBuffer (pParmBuffer, pMeta, pDef ,   pValueNode);                         |    324
   325       |         } else {                                                                                 |    325
 ===========> .............a....................................................................................
 *=SEVERE==========> a - CZM0045  Undeclared identifier pMetaElements.
   326       |            copyNodeValueIntoBuffer ( pParmBuffer, pDef, pValueNode);                             |    326
   327       |         }                                                                                        |    327
   328       |         pParmBuffer += pDef->size;                                                               |    328
   329       |         pMetaElements = nox_GetNodeNext(pMetaElements);                                          |    329
   330       |      }                                                                                           |    330
   331       |   // Since the parent has the definition, and each values comes as an object in an array:        |    331
   332       |   } else if (pParentMeta && pParentMeta->dim > 0) {                                              |    332
   333       |      PNOXNODE pMetaElements = nox_GetNodeChild(pParentMeta->pStructure);                         |    333
   334       |      while (pMetaElements) {                                                                     |    334
   335       |         PJXPARMMETA pDef = getParmDefinition (pMetaElements);                                    |    335
   336       |         if (pDef->pStructure || pDef->dim > 0 ) {                                                |    336
   337       |            copyNodeIntoBuffer (pParmBuffer, pMeta, pDef ,pParmValueNode);                        |    337
   338       |         } else {                                                                                 |    338
   339       |            copyNodeValueIntoBuffer ( pParmBuffer, pDef, pParmValueNode);                         |    339
   340       |         }                                                                                        |    340
   341       |         pParmBuffer += pDef->size;                                                               |    341
   342       |         pMetaElements = nox_GetNodeNext(pMetaElements);                                          |    342
   343       |      }                                                                                           |    343
   344       |   } else {                                                                                       |    344
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          14
   345       |      copyNodeValueIntoBuffer ( pParmBuffer, pMeta, pParmValueNode);                              |    345
   346       |   }                                                                                              |    346
   347       |}                                                                                                 |    347
   348       |// ---------------------------------------------------------------------------------------        |    348
   349       |#pragma conver(1252)                                                                              |    349
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   350       |static int buildArgBufferArray (PJXMETHOD pMethod, PNOXNODE pParms, PVOID argArray [256] , PUCHAR\|    350
   350       | * ppArgBuffer)                                                                                   |    350
   351       |{                                                                                                 |    351
   352       |                                                                                                  |    352
   353       |   int args = 0;                                                                                  |    353
   354       |   ULONG   bufTotlen;                                                                             |    354
   355       |   PUCHAR  pParmBuffer;                                                                           |    355
   356       |   PNOXNODE pInterface, pParmObj;                                                                 |    356
   357       |                                                                                                  |    357
   358       |   pInterface = (pMethod->pProc == NULL) ? pMethod->pPgm : pMethod->pProc;                        |    358
   359       |   bufTotlen =  nox_GetValueInt  (pInterface , "buflen" , 0) ;                                    |    359
   360       |                                                                                                  |    360
   361       |   pParmBuffer = memAlloc (bufTotlen);                                                            |    361
   362       |   memset ( pParmBuffer , '\0',  bufTotlen);                                                      |    362
   363       |   *ppArgBuffer = pParmBuffer;                                                                    |    363
   364       |                                                                                                  |    364
   365       |   pParmObj = nox_GetNodeChild(nox_GetNode ( pInterface , "parms"));                              |    365
   366       |   while (pParmObj) {                                                                             |    366
   367       |      PJXPARMMETA pMeta = getParmDefinition (pParmObj);                                           |    367
   368       |      PUCHAR pBuf = pParmBuffer + pMeta->offset;                                                  |    368
   369       |      argArray [args++] = pBuf;                                                                   |    369
   370       |      copyNodeIntoBuffer (pBuf, NULL , pMeta ,  pParms);                                          |    370
   371       |      pParmObj = nox_GetNodeNext(pParmObj);                                                       |    371
   372       |   }                                                                                              |    372
   373       |   return args;                                                                                   |    373
   374       |}                                                                                                 |    374
   375       |#pragma conver(0)                                                                                 |    375
 ===========> a.................................................................................................
 *=WARNING=========> a - CZM0224  Incorrect pragma ignored.
   376       |// ---------------------------------------------------------------------------------------        |    376
   377       |static PNOXNODE newReturnNode (PJXPARMMETA pMethodParm, PUCHAR pParmBuffer )                      |    377
   378       |{                                                                                                 |    378
   379       |                                                                                                  |    379
   380       |   UCHAR data [32000]; // TODO - dynamic size                                                     |    380
   381       |                                                                                                  |    381
   382       |   switch (pMethodParm->dType) {                                                                  |    382
   383       |      case NOX_DTYPE_STRUCTURE: {                                                                 |    383
   384       |         break;                                                                                   |    384
   385       |      }                                                                                           |    385
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          15
   386       |      case NOX_DTYPE_CHAR: {                                                                      |    386
   387       |         strrighttrimncpy(data ,pParmBuffer , pMethodParm->length );                              |    387
   388       |         break;                                                                                   |    388
   389       |      }                                                                                           |    389
   390       |      case NOX_DTYPE_VARCHAR: {                                                                   |    390
   391       |         int actlen =  (pMethodParm->precision == 4) ? *(PULONG) pParmBuffer : *(PUSHORT) pParmBu\|    391
   391       |ffer ;                                                                                            |    391
   392       |         substr (data  , pParmBuffer + pMethodParm->precision ,actlen);                           |    392
   393       |         break;                                                                                   |    393
   394       |      }                                                                                           |    394
   395       |      case NOX_DTYPE_BYTE: {                                                                      |    395
   396       |         USHORT i = *(PUCHAR) pParmBuffer;                                                        |    396
   397       |         sprintf ( data , "%hd" , *pParmBuffer);                                                  |    397
   398       |         break;                                                                                   |    398
   399       |      }                                                                                           |    399
   400       |      case NOX_DTYPE_INT: {                                                                       |    400
   401       |         BOOL isSigned = (pMethodParm->precision % 2 != 0) ? TRUE : FALSE;                        |    401
   402       |         fmtInteger (data , pParmBuffer , pMethodParm->length , isSigned );                       |    402
   403       |         break;                                                                                   |    403
   404       |      }                                                                                           |    404
   405       |      case NOX_DTYPE_PACKED: {                                                                    |    405
   406       |         fmtPacked(data  , pParmBuffer , pMethodParm->length  , pMethodParm->precision , '.');    |    406
   407       |         break;                                                                                   |    407
   408       |      }                                                                                           |    408
   409       |      case NOX_DTYPE_ZONED: {                                                                     |    409
   410       |         fmtZoned (data  , pParmBuffer , pMethodParm->length  , pMethodParm->precision, '.');     |    410
   411       |         break;                                                                                   |    411
   412       |      }                                                                                           |    412
   413       |      case NOX_DTYPE_DATE: {                                                                      |    413
   414       |         fmtDate  ( data , pParmBuffer , pMethodParm->format);                                    |    414
   415       |         break;                                                                                   |    415
   416       |      }                                                                                           |    416
   417       |      case NOX_DTYPE_TIME: {                                                                      |    417
   418       |         fmtTime  ( data , pParmBuffer);                                                          |    418
   419       |         break;                                                                                   |    419
   420       |      }                                                                                           |    420
   421       |      case NOX_DTYPE_TIME_STAMP: {                                                                |    421
   422       |         substr  ( data  ,  pParmBuffer , pMethodParm->length);                                   |    422
   423       |         break;                                                                                   |    423
   424       |      }                                                                                           |    424
   425       |      case NOX_DTYPE_BOOL: {                                                                      |    425
   426       |         strcpy ( data , (*pParmBuffer == '1') ? "true" : "false");                               |    426
   427       |         break;                                                                                   |    427
   428       |      }                                                                                           |    428
   429       |      case NOX_DTYPE_UNKNOWN: {                                                                   |    429
   430       |         break;                                                                                   |    430
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          16
   431       |      }                                                                                           |    431
   432       |   }                                                                                              |    432
   433       |   return nox_NewNode(pMethodParm->name , data , pMethodParm->graphDataType );                    |    433
   434       |                                                                                                  |    434
   435       |}                                                                                                 |    435
   436       |/* ------------------------------------------------------------- */                               |    436
   437       |static void  setReturnObject (PNOXNODE pReturnObject, PNOXNODE pParmObj , PUCHAR pParmBuffer, BOO\|    437
   437       |L isArray )                                                                                       |    437
   438       |{                                                                                                 |    438
   439       |   PJXPARMMETA pMethodParm = getParmDefinition (pParmObj);                                        |    439
   440       |                                                                                                  |    440
   441       |   if (pMethodParm->dim > 0 && isArray == FALSE) {                                                |    441
   442       |      if (isAnonymousArray(pMethodParm->name)) {                                                  |    442
   443       |         if (pMethodParm->pStructure) {                                                           |    443
   444       |            PNOXNODE pStructObj = nox_GetNodeChild(pMethodParm->pStructure);                      |    444
   445       |            for (int i = 0 ; i< pMethodParm->dim ; i++) {                                         |    445
   446       |               setReturnObject ( pReturnObject  , pStructObj , pParmBuffer, TRUE);                |    446
   447       |               pParmBuffer += pMethodParm->size;                                                  |    447
   448       |            }                                                                                     |    448
   449       |         } else {                                                                                 |    449
   450       |            for (int i = 0 ; i< pMethodParm->dim ; i++) {                                         |    450
   451       |               nox_NodeInsertChildTail  ( pReturnObject , newReturnNode (pMethodParm, pParmBuffer\|    451
   451       |));                                                                                               |    451
   452       |               pParmBuffer += pMethodParm->size;                                                  |    452
   453       |            }                                                                                     |    453
   454       |         }                                                                                        |    454
   455       |      } else {                                                                                    |    455
   456       |         PNOXNODE pReturnArray = nox_NewArray(NULL);                                              |    456
   457       |         nox_NodeRename (pReturnArray , pMethodParm->name);                                       |    457
   458       |         if (pMethodParm->pStructure) {                                                           |    458
   459       |            PNOXNODE pStructObj = nox_GetNodeChild(pMethodParm->pStructure);                      |    459
   460       |            for (int i = 0 ; i< pMethodParm->dim ; i++) {                                         |    460
   461       |               setReturnObject ( pReturnArray  , pStructObj , pParmBuffer, TRUE);                 |    461
   462       |               pParmBuffer += pMethodParm->size;                                                  |    462
   463       |            }                                                                                     |    463
   464       |         } else {                                                                                 |    464
   465       |            for (int i = 0 ; i< pMethodParm->dim ; i++) {                                         |    465
   466       |               nox_NodeInsertChildTail  ( pReturnArray , newReturnNode (pMethodParm, pParmBuffer)\|    466
   466       |);                                                                                                |    466
   467       |               pParmBuffer += pMethodParm->size;                                                  |    467
   468       |            }                                                                                     |    468
   469       |         }                                                                                        |    469
   470       |         nox_NodeInsertChildTail (pReturnObject , pReturnArray );                                 |    470
   471       |      }                                                                                           |    471
   472       |   } else if (isArray) {                                                                          |    472
   473       |      PNOXNODE pReturnStruct = isAnonymousArray(pMethodParm->name) ? nox_NewArray(NULL) : nox_New\|    473
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          17
   473       |Object(NULL);                                                                                     |    473
   474       |      for (; pParmObj ; pParmObj = nox_GetNodeNext(pParmObj)) {                                   |    474
   475       |         PJXPARMMETA pStructParm = getParmDefinition (pParmObj);                                  |    475
   476       |         setReturnObject ( pReturnStruct , pParmObj, pParmBuffer + pStructParm->offset, FALSE);   |    476
   477       |      }                                                                                           |    477
   478       |      nox_NodeInsertChildTail (pReturnObject , pReturnStruct );                                   |    478
   479       |   } else if (pMethodParm->dType == NOX_DTYPE_STRUCTURE) {                                        |    479
   480       |      PNOXNODE pStructObj = nox_GetNodeChild(pMethodParm->pStructure);                            |    480
   481       |      PNOXNODE pReturnStruct = isAnonymousArray(pMethodParm->name) ? nox_NewArray(NULL) : nox_New\|    481
   481       |Object(NULL);                                                                                     |    481
   482       |      nox_NodeRename (pReturnStruct , pMethodParm->name);                                         |    482
   483       |      for (; pStructObj ; pStructObj = nox_GetNodeNext(pStructObj)) {                             |    483
   484       |         PJXPARMMETA pStructParm = getParmDefinition (pStructObj);                                |    484
   485       |         setReturnObject ( pReturnStruct , pStructObj, pParmBuffer + pStructParm->offset, FALSE); |    485
   486       |      }                                                                                           |    486
   487       |      nox_NodeInsertChildTail (pReturnObject , pReturnStruct );                                   |    487
   488       |   } else {                                                                                       |    488
   489       |      nox_NodeInsertChildTail (pReturnObject , newReturnNode (pMethodParm,  pParmBuffer));        |    489
   490       |   }                                                                                              |    490
   491       |}                                                                                                 |    491
   492       |/* ------------------------------------------------------------- */                               |    492
   493       |static PNOXNODE buildReturnObject (PJXMETHOD  pMethod, PNOXNODE pParms, PVOID argArray [256], int\|    493
   493       | args)                                                                                            |    493
   494       |{                                                                                                 |    494
   495       |   PNOXNODE pReturnObject = NULL ;                                                                |    495
   496       |   PNOXNODE pInterface = (pMethod->pProc == NULL) ? pMethod->pPgm : pMethod->pProc;               |    496
   497       |#pragma convert(1252)                                                                             |    497
   498       |   PNOXNODE pParmObj = nox_GetNodeChild(nox_GetNode ( pInterface , "parms"));                     |    498
   499       |#pragma convert(0)                                                                                |    499
   500       |   for (int argIx= 0; pParmObj ;  argIx++, pParmObj = nox_GetNodeNext(pParmObj)) {                |    500
   501       |      PJXPARMMETA pMethodParm = getParmDefinition (pParmObj);                                     |    501
   502       |      if (pMethodParm->use == 'B') { // BOTH .. TODO in enum                                      |    502
   503       |         if (pReturnObject == NULL) {                                                             |    503
   504       |            pReturnObject = isAnonymousArray(pMethodParm->name) ? nox_NewArray(NULL) : nox_NewObj\|    504
   504       |ect(NULL);                                                                                        |    504
   505       |         }                                                                                        |    505
   506       |         setReturnObject (pReturnObject , pParmObj,  argArray [argIx], FALSE);                    |    506
   507       |      }                                                                                           |    507
   508       |   }                                                                                              |    508
   509       |                                                                                                  |    509
   510       |   return pReturnObject;                                                                          |    510
   511       |}                                                                                                 |    511
   512       |                                                                                                  |    512
   513       |/* --------------------------------------------------------------------------- *\                 |    513
   514       |<?xml version="1.0" encoding="UTF-8" ?>                                                           |    514
   515       |<pcml version="8.0">                                                                              |    515
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          18
   516       |  <struct name="employee_t">                                                                      |    516
   517       |    <data name="id" type="int" length="4" precision="31" usage="inherit"/>                        |    517
   518       |    <data name="name" type="char" length="50" usage="inherit"/>                                   |    518
   519       |    <data name="age" type="int" length="4" precision="31" usage="inherit"/>                       |    519
   520       |    <data name="income" type="packed" length="9" precision="2" usage="inherit"/>                  |    520
   521       |    <data name="birthDate" type="date" dateformat="ISO" dateseparator="hyphen" usage="inherit"/>  |    521
   522       |    <data name="birthTime" type="time" timeformat="ISO" timeseparator="period" usage="inherit"/>  |    522
   523       |    <data name="updated" type="timestamp" usage="inherit"/>                                       |    523
   524       |    <data name="isMale" type="char" length="1" boolean="true" usage="inherit"/>                   |    524
   525       |  </struct>                                                                                       |    525
   526       |  <program name="complex" entrypoint="COMPLEX">                                                   |    526
   527       |    <data name="id" type="int" length="4" precision="31" usage="input"/>                          |    527
   528       |    <data name="employee" type="struct" struct="employee_t" usage="inputoutput"/>                 |    528
   529       |  </program>                                                                                      |    529
   530       |  <program name="allTypes" entrypoint="ALLTYPES">                                                 |    530
   531       |    <data name="char" type="char" length="10" usage="inputoutput"/>                               |    531
   532       |    <data name="varchar" type="varchar" length="10" usage="inputoutput"/>                         |    532
   533       |    <data name="int8" type="int" length="8" precision="63" usage="inputoutput"/>                  |    533
   534       |    <data name="int4" type="int" length="4" precision="31" usage="inputoutput"/>                  |    534
   535       |    <data name="uns8" type="int" length="8" precision="64" usage="inputoutput"/>                  |    535
   536       |    <data name="uns4" type="int" length="4" precision="32" usage="inputoutput"/>                  |    536
   537       |    <data name="uns2" type="byte" length="1" usage="inputoutput"/>                                |    537
   538       |    <data name="packed" type="packed" length="9" precision="2" usage="inputoutput"/>              |    538
   539       |    <data name="zoned" type="zoned" length="9" precision="2" usage="inputoutput"/>                |    539
   540       |    <data name="ind" type="char" length="1" boolean="true" usage="inputoutput"/>                  |    540
   541       |    <data name="date" type="date" dateformat="ISO" dateseparator="hyphen" usage="inputoutput"/>   |    541
   542       |    <data name="time" type="time" timeformat="ISO" timeseparator="period" usage="inputoutput"/>   |    542
   543       |    <data name="timestamp" type="timestamp" usage="inputoutput"/>                                 |    543
   544       |  </program>                                                                                      |    544
   545       |  <program name="nameAge" entrypoint="NAMEAGE">                                                   |    545
   546       |    <data name="Name" type="char" length="10" usage="input"/>                                     |    546
   547       |    <data name="Text" type="char" length="200" usage="inputoutput"/>                              |    547
   548       |    <data name="Age" type="packed" length="5" precision="0" usage="inputoutput"/>                 |    548
   549       |  </program>                                                                                      |    549
   550       |</pcml>\* --------------------------------------------------------------------------- */          |    550
   551       |                                                                                                  |    551
   552       |/* --------------------------------------------------------------------------- *\                 |    552
   553       |    Call the plain program resolved by the system pointer:                                        |    553
   554       |\* --------------------------------------------------------------------------- */                 |    554
   555       |static PNOXNODE  call    (PJXMETHOD pMethod , PNOXNODE parms, ULONG options)                      |    555
   556       |{                                                                                                 |    556
   557       |   PNOXNODE pReturnObject;                                                                        |    557
   558       |   PNOXNODE pParms;                                                                               |    558
   559       |   BOOL    freeAfter;                                                                             |    559
   560       |   PUCHAR  pArgBuffer;                                                                            |    560
   561       |   PVOID   argArray[256];                                                                         |    561
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          19
   562       |                                                                                                  |    562
   563       |   if ((parms != NULL)                                                                            |    563
   564       |   &&  (parms->signature != NODESIG)) {                                                           |    564
   565       |      pParms  = nox_ParseString ((PUCHAR) parms, "" );                                            |    565
   566       |      freeAfter = TRUE;                                                                           |    566
   567       |   } else {                                                                                       |    567
   568       |      pParms  = parms;                                                                            |    568
   569       |      freeAfter = FALSE;                                                                          |    569
   570       |   }                                                                                              |    570
   571       |                                                                                                  |    571
   572       |   int args = buildArgBufferArray ( pMethod, pParms, argArray, &pArgBuffer);                      |    572
   573       |                                                                                                  |    573
   574       |   if ( pMethod->userMethodIsProgram) {                                                           |    574
   575       |      nox_callPgm ( pMethod->userMethod , argArray , args );                                      |    575
   576       |   } else {                                                                                       |    576
   577       |      nox_callProc (pMethod->userMethod , argArray , args);                                       |    577
   578       |   }                                                                                              |    578
   579       |                                                                                                  |    579
   580       |   pReturnObject = buildReturnObject (pMethod, pParms, argArray, args);                           |    580
   581       |                                                                                                  |    581
   582       |   memFree (&pArgBuffer);                                                                         |    582
   583       |                                                                                                  |    583
   584       |   if (freeAfter) {                                                                               |    584
   585       |      nox_NodeDelete (pParms);                                                                    |    585
   586       |   }                                                                                              |    586
   587       |                                                                                                  |    587
   588       |   return pReturnObject;                                                                          |    588
   589       |}                                                                                                 |    589
   590       |                                                                                                  |    590
   591       |/* --------------------------------------------------------------------------- *\                 |    591
   592       |    Get the pcml from the program                                                                 |    592
   593       |\* --------------------------------------------------------------------------- */                 |    593
   594       |PNOXNODE  nox_ProgramMeta ( PUCHAR library , PUCHAR Program)                                      |    594
   595       |{                                                                                                 |    595
   596       |   Qbn_Interface_Entry_t * pet;                                                                   |    596
   597       |   Qbn_PGII0100_t * ppgi;                                                                         |    597
   598       |   UCHAR buffer [100000];                                                                         |    598
   599       |   long long err = 0;                                                                             |    599
   600       |   long i;                                                                                        |    600
   601       |   PNOXNODE pPcml;                                                                                |    601
   602       |   PUCHAR pcml;                                                                                   |    602
   603       |   UCHAR libpgm [20];                                                                             |    603
   604       |                                                                                                  |    604
   605       |   padncpy ( libpgm      , Program , 10 );                                                        |    605
   606       |   padncpy ( libpgm +10  , library , 10 );                                                        |    606
   607       |                                                                                                  |    607
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          20
   608       |   QBNRPII (                                                                                      |    608
   609       |      buffer ,                   /* Receiver variable                    */                       |    609
   610       |      sizeof(buffer),            /* Length of receiver variable          */                       |    610
   611       |      "RPII0100 ",               /* Format name                          */                       |    611
   612       |      libpgm     ,               /* Qualified object name                */                       |    612
   613       |      "*PGM      ",              /* Object Type                          */                       |    613
   614       |      "*ALLBNDMOD          ",    /* Qualified bound module name          */                       |    614
   615       |      &err                       /* Error code                           */                       |    615
   616       |   );                                                                                             |    616
   617       |   ppgi = (Qbn_PGII0100_t *) buffer;                                                              |    617
   618       |   pet = (Qbn_Interface_Entry_t * ) (buffer + ppgi->Offset_First_Entry);                          |    618
   619       |   pcml = buffer + pet->Offset_Interface_Info;                                                    |    619
   620       |   pcml [pet->Interface_Info_Length_Ret] = '\0';                                                  |    620
   621       |   pPcml  = nox_ParseString(pcml, "");                                                            |    621
   622       |                                                                                                  |    622
   623       |   // would yield QTEMP - where it is build                                                       |    623
   624       |   // if (*library == '*') {                                                                      |    624
   625       |   //    memcpy ( library , pet->Module_Library, 10);                                             |    625
   626       |   // }                                                                                           |    626
   627       |                                                                                                  |    627
   628       |   return  pPcml;                                                                                 |    628
   629       |}                                                                                                 |    629
   630       |/* --------------------------------------------------------------------------- *\                 |    630
   631       |    Get the pcml from the program                                                                 |    631
   632       |\* --------------------------------------------------------------------------- */                 |    632
   633       |PNOXNODE  nox_ProcedureMeta ( PUCHAR library , PUCHAR Program , PUCHAR Procedure)                 |    633
   634       |{                                                                                                 |    634
   635       |   Qbn_Interface_Entry_t * pet;                                                                   |    635
   636       |   Qbn_PGII0100_t * ppgi;                                                                         |    636
   637       |   UCHAR buffer [100000];                                                                         |    637
   638       |   long long err = 0;                                                                             |    638
   639       |   long i;                                                                                        |    639
   640       |   PNOXNODE pPcml;                                                                                |    640
   641       |   PUCHAR pcml;                                                                                   |    641
   642       |   UCHAR libpgm [20];                                                                             |    642
   643       |                                                                                                  |    643
   644       |   padncpy ( libpgm      , Program , 10 );                                                        |    644
   645       |   padncpy ( libpgm +10  , library , 10 );                                                        |    645
   646       |                                                                                                  |    646
   647       |   QBNRPII (                                                                                      |    647
   648       |      buffer ,                   /* Receiver variable                    */                       |    648
   649       |      sizeof(buffer),            /* Length of receiver variable          */                       |    649
   650       |      "RPII0100 ",               /* Format name                          */                       |    650
   651       |      libpgm     ,               /* Qualified object name                */                       |    651
   652       |      "*SRVPGM      ",              /* Object Type                          */                    |    652
   653       |      "*ALLBNDMOD          ",    /* Qualified bound module name          */                       |    653
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          21
   654       |      &err                       /* Error code                           */                       |    654
   655       |   );                                                                                             |    655
   656       |   ppgi = (Qbn_PGII0100_t *) buffer;                                                              |    656
   657       |   pet = (Qbn_Interface_Entry_t * ) (buffer + ppgi->Offset_First_Entry);                          |    657
   658       |   for (i=0;i< ppgi->Number_Entries; i++ ) {                                                      |    658
   659       |      pcml = buffer + pet->Offset_Interface_Info;                                                 |    659
   660       |      pcml [pet->Interface_Info_Length_Ret] = '\0';                                               |    660
   661       |      pPcml  = nox_ParseString(pcml, "");                                                         |    661
   662       |                                                                                                  |    662
   663       |      // would yield QTEMP - where it is build                                                    |    663
   664       |      // if (*library == '*') {                                                                   |    664
   665       |      //    memcpy ( library , pet->Module_Library, 10);                                          |    665
   666       |      // }                                                                                        |    666
   667       |                                                                                                  |    667
   668       |      return  pPcml;                                                                              |    668
   669       |      // TODO !! pOpenAPI->ccsid = pet->Interface_Info_CCSID;                                     |    669
   670       |      /*                                                                                          |    670
   671       |                                                                                                  |    671
   672       |      printf ("Module : %10.10s \n" ,  pet->Module_Name);                                         |    672
   673       |      printf ("library: %10.10s \n" ,  pet->Module_library);                                      |    673
   674       |      printf ("ccsid  : %d \n" ,  pet->Interface_Info_CCSID);                                     |    674
   675       |      printf ("pcml   : %s \n" ,  pcml);                                                          |    675
   676       |      */                                                                                          |    676
   677       |      pet = (Qbn_Interface_Entry_t *) ((char *) pet + pet->Offset_Next_Entry);                    |    677
   678       |   }                                                                                              |    678
   679       |   return NULL;                                                                                   |    679
   680       |}                                                                                                 |    680
   681       |//  ---------------------------------------------------------------------------                   |    681
   682       |#pragma convert(1252)                                                                             |    682
   683       |NOX_DTYPE convertDataType (PUCHAR type)                                                           |    683
   684       |{                                                                                                 |    684
   685       |   if (type == NULL) {                                                                            |    685
   686       |      return NOX_DTYPE_UNKNOWN;                                                                   |    686
   687       |   } else if (0 == strcmp(type , "char")) {                                                       |    687
   688       |      return NOX_DTYPE_CHAR;                                                                      |    688
   689       |   } else if (0 == strcmp(type , "packed")) {                                                     |    689
   690       |      return NOX_DTYPE_PACKED;                                                                    |    690
   691       |   } else if (0 == strcmp(type , "zoned")) {                                                      |    691
   692       |      return NOX_DTYPE_ZONED;                                                                     |    692
   693       |   } else if (0 == strcmp(type , "varchar")) {                                                    |    693
   694       |      return NOX_DTYPE_VARCHAR;                                                                   |    694
   695       |   } else if (0 == strcmp(type , "date")) {                                                       |    695
   696       |      return NOX_DTYPE_DATE;                                                                      |    696
   697       |   } else if (0 == strcmp(type , "time")) {                                                       |    697
   698       |      return NOX_DTYPE_TIME;                                                                      |    698
   699       |   } else if (0 == strcmp(type , "timestamp")) {                                                  |    699
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          22
   700       |      return NOX_DTYPE_TIME_STAMP;                                                                |    700
   701       |   } else if (0 == strcmp(type , "int")) {                                                        |    701
   702       |      return NOX_DTYPE_INT;                                                                       |    702
   703       |   } else if (0 == strcmp(type , "byte")) {                                                       |    703
   704       |      return NOX_DTYPE_BYTE;                                                                      |    704
   705       |   } else if (0 == strcmp(type , "struct")) {                                                     |    705
   706       |      return NOX_DTYPE_STRUCTURE;                                                                 |    706
   707       |   } else {                                                                                       |    707
   708       |      return NOX_DTYPE_UNKNOWN;                                                                   |    708
   709       |   }                                                                                              |    709
   710       |}                                                                                                 |    710
   711       |#pragma convert(0)                                                                                |    711
   712       |/* --------------------------------------------------------------------------- *\                 |    712
   713       |   Recursivly run through each node                                                               |    713
   714       |\* --------------------------------------------------------------------------- */                 |    714
   715       |#pragma convert(1252)                                                                             |    715
   716       |static LONG getTotalStructSize(PNOXNODE pStructure) {                                             |    716
   717       |   LONG totalSize = 0 ;                                                                           |    717
   718       |   for (PNOXNODE pElements = nox_GetNodeChild ( pStructure ) ; pElements ; pElements =  nox_GetNo\|    718
   718       |deNext  (pElements )) {                                                                           |    718
   719       |      PJXPARMMETA pMeta = (PJXPARMMETA) nox_GetNodeAttrValuePtr ( pElements, "def" , NULL);       |    719
   720       |      if  (pMeta) {  // TODO !!! need it allways !!                                               |    720
   721       |         if  (pMeta->pStructure) {                                                                |    721
   722       |            totalSize += getTotalStructSize (pElements);                                          |    722
   723       |         }                                                                                        |    723
   724       |         totalSize += (pMeta->dim > 0) ? pMeta->size * pMeta->dim : pMeta->size;                  |    724
   725       |      }                                                                                           |    725
   726       |   }                                                                                              |    726
   727       |   return totalSize;                                                                              |    727
   728       |}                                                                                                 |    728
   729       |#pragma convert(0)                                                                                |    729
   730       |/* --------------------------------------------------------------------------- *\                 |    730
   731       |   Create a new method parameter object                                                           |    731
   732       |\* --------------------------------------------------------------------------- */                 |    732
   733       |#pragma convert(1252)                                                                             |    733
   734       |PJXPARMMETA newMethodParm ( PNOXNODE pParmMeta)                                                   |    734
   735       |{                                                                                                 |    735
   736       |   PUCHAR p;                                                                                      |    736
   737       |   PJXPARMMETA pMethodParm  = memAlloc (sizeof(JXPARMMETA));                                      |    737
   738       |   memset (pMethodParm , 0, sizeof(JXPARMMETA));                                                  |    738
   739       |   strcpy(pMethodParm->name , parmMetaValue ( pParmMeta, "name"));                                |    739
   740       |   //  TODO !! Cater for PCML version before 7.0                                                  |    740
   741       |   // if (0 == strcmp("struct" ,nox_GetNodeNamePtr (pParmMeta))) {                                |    741
   742       |   //   pMethodParm->dType = NOX_DTYPE_STRUCTURE;                                                 |    742
   743       |   //} else {                                                                                     |    743
   744       |   if (*parmMetaValue ( pParmMeta, "boolean") == 't') { // short for "true"                       |    744
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          23
   745       |      pMethodParm->dType  = NOX_DTYPE_BOOL;                                                       |    745
   746       |   } else {                                                                                       |    746
   747       |      pMethodParm->dType  = convertDataType(parmMetaValue ( pParmMeta, "type"));                  |    747
   748       |   }                                                                                              |    748
   749       |   pMethodParm->use       = (0 == strcmp(parmMetaValue ( pParmMeta, "usage") , "inputoutput")) ? \|    749
   749       |'B' : 'I';                                                                                        |    749
   750       |   pMethodParm->length    = parmMetaValueInt ( pParmMeta, "length", 0);                           |    750
   751       |   pMethodParm->precision = parmMetaValueInt ( pParmMeta, "precision", 0);                        |    751
   752       |   pMethodParm->dim       = parmMetaValueInt ( pParmMeta, "count", 0);                            |    752
   753       |   // pMethodParm->format    = NULL;                                                              |    753
   754       |   // pMethodParm->separator = NULL;                                                              |    754
   755       |   // pMethodParm->separatorChar = '.';                                                           |    755
   756       |   // pMethodParm->dType     = '?';                                                               |    756
   757       |   pMethodParm->size      = pMethodParm->length;                                                  |    757
   758       |   pMethodParm->graphDataType = VALUE;                                                            |    758
   759       |   return pMethodParm;                                                                            |    759
   760       |}                                                                                                 |    760
   761       |#pragma convert(0)                                                                                |    761
   762       |// ----------------------------------------------------------------------------------------       |    762
   763       |#pragma convert(1252)                                                                             |    763
   764       |PNOXNODE buildMethodParmObject ( PJXPARMMETA pMethodParm)                                         |    764
   765       |{                                                                                                 |    765
   766       |   PNOXNODE  pParmObject = nox_NewObject (NULL);                                                  |    766
   767       |                                                                                                  |    767
   768       |   // The internal binary definition structure pointer saved in the graph                         |    768
   769       |   nox_SetNodeAttrValuePtr(pParmObject  , "def" , (PUCHAR) pMethodParm);                          |    769
   770       |                                                                                                  |    770
   771       |   if (pMethodParm->pStructure) {                                                                 |    771
   772       |      pMethodParm->length = pMethodParm->size =  getTotalStructSize (pMethodParm->pStructure);    |    772
   773       |      // No !! Structure size for array is done at top level:                                     |    773
   774       |      // if (pMethodParm->dim > 0) {                                                              |    774
   775       |      //    pMethodParm->size *= pMethodParm->dim;                                                |    775
   776       |      // }                                                                                        |    776
   777       |      nox_SetValueByName(pParmObject  , "name"  , pMethodParm->name   , VALUE);                   |    777
   778       |      nox_SetIntByName  (pParmObject  , "offset", pMethodParm->offset , OFF);                     |    778
   779       |      nox_SetIntByName  (pParmObject  , "size"  , pMethodParm->size , OFF);                       |    779
   780       |      if (pMethodParm->dim > 0) {                                                                 |    780
   781       |         nox_SetIntByName  (pParmObject  , "dim" ,  pMethodParm->dim, OFF);                       |    781
   782       |      }                                                                                           |    782
   783       |      nox_SetValueByName(pParmObject  , "struct" , (PUCHAR) pMethodParm->pStructure  , NOXDB_SUBG\|    783
   783       |RAPH);                                                                                            |    783
   784       |   } else {                                                                                       |    784
   785       |      nox_SetValueByName(pParmObject  , "name"  , pMethodParm->name   , VALUE);                   |    785
   786       |      nox_SetCharByName (pParmObject  , "type"  , pMethodParm->dType  , OFF);                     |    786
   787       |      nox_SetCharByName (pParmObject  , "use"   , pMethodParm->use    , OFF);                     |    787
   788       |      nox_SetIntByName  (pParmObject  , "offset", pMethodParm->offset , OFF);                     |    788
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          24
   789       |      nox_SetIntByName  (pParmObject  , "size"  , pMethodParm->size , OFF);                       |    789
   790       |      nox_SetIntByName  (pParmObject  , "length", pMethodParm->length , OFF);                     |    790
   791       |      nox_SetIntByName  (pParmObject  , "prec" ,  pMethodParm->precision, OFF);                   |    791
   792       |      if (*pMethodParm->format) {                                                                 |    792
   793       |         nox_SetValueByName(pParmObject  , "format", pMethodParm->format   , VALUE);              |    793
   794       |      }                                                                                           |    794
   795       |      if (pMethodParm->separatorChar) {                                                           |    795
   796       |         nox_SetCharByName (pParmObject  , "separator",  pMethodParm->separatorChar , VALUE);     |    796
   797       |      }                                                                                           |    797
   798       |      if (pMethodParm->dim > 0) {                                                                 |    798
   799       |         nox_SetIntByName  (pParmObject  , "dim" ,  pMethodParm->dim, OFF);                       |    799
   800       |      }                                                                                           |    800
   801       |   }                                                                                              |    801
   802       |                                                                                                  |    802
   803       |   return pParmObject;                                                                            |    803
   804       |}                                                                                                 |    804
   805       |#pragma convert(0)                                                                                |    805
   806       |// ----------------------------------------------------------------------------------------       |    806
   807       |#pragma convert(1252)                                                                             |    807
   808       |static PNOXNODE buildParmElements(PNOXNODE pPcmlProgram, PNOXNODE pStructs, PLONG offset, PLONG s\|    808
   808       |ize, PNOXNODE pProgram)                                                                           |    808
   809       |{                                                                                                 |    809
   810       |                                                                                                  |    810
   811       |   PNOXNODE pParms    = nox_NewArray (NULL);                                                      |    811
   812       |   PNOXNODE pParmMeta = nox_GetNode  (pPcmlProgram , "data");                                     |    812
   813       |   while (pParmMeta) {                                                                            |    813
   814       |      PNOXNODE     pParm;                                                                         |    814
   815       |      PJXPARMMETA pMethodParm = newMethodParm ( pParmMeta);                                       |    815
   816       |                                                                                                  |    816
   817       |      switch ( pMethodParm->dType) {                                                              |    817
   818       |                                                                                                  |    818
   819       |         case NOX_DTYPE_STRUCTURE: {                                                              |    819
   820       |            // Is it a varchar                                                                    |    820
   821       |            PNOXNODE pChild1 = nox_GetNodeChild ( pParmMeta);                                     |    821
   822       |            PNOXNODE pChild2 = nox_GetNodeNext  ( pChild1 );                                      |    822
   823       |                                                                                                  |    823
   824       |            // PCML prior to V6 for VARCHAR                                                       |    824
   825       |            if ((pChild1 && pChild2)                                                              |    825
   826       |            && ( 0 == strcmp (parmMetaValue ( pChild1, "name") ,"length")                         |    826
   827       |            &&   0 == strcmp (parmMetaValue ( pChild2, "name") ,"string"))) {                     |    827
   828       |               pMethodParm->dType = NOX_DTYPE_VARCHAR;                                            |    828
   829       |               pMethodParm->precision = parmMetaValueInt ( pChild1, "length", 2);                 |    829
   830       |               pMethodParm->size = parmMetaValueInt ( pParmMeta, "outputsize", 0);                |    830
   831       |               pMethodParm->length = pMethodParm->size - pMethodParm->precision;                  |    831
   832       |            } else {                                                                              |    832
   833       |               PUCHAR nodeName ;                                                                  |    833
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          25
   834       |               nodeName =  parmMetaValue ( pParmMeta , "struct");                                 |    834
   835       |               pMethodParm->pStructure  = nox_GetNode  (pStructs , nodeName);                     |    835
   836       |            }                                                                                     |    836
   837       |            break;                                                                                |    837
   838       |         }                                                                                        |    838
   839       |         case NOX_DTYPE_CHAR:{                                                                    |    839
   840       |            pMethodParm->graphDataType = VALUE;                                                   |    840
   841       |            break;                                                                                |    841
   842       |         }                                                                                        |    842
   843       |         case NOX_DTYPE_VARCHAR: {                                                                |    843
   844       |            pMethodParm->graphDataType = VALUE;                                                   |    844
   845       |            if (pMethodParm->precision == 0) {                                                    |    845
   846       |               pMethodParm->precision = 2;                                                        |    846
   847       |            }                                                                                     |    847
   848       |            pMethodParm->size = pMethodParm->precision + pMethodParm->length;                     |    848
   849       |            break;                                                                                |    849
   850       |         }                                                                                        |    850
   851       |         case NOX_DTYPE_INT:                                                                      |    851
   852       |         case NOX_DTYPE_BYTE:                                                                     |    852
   853       |         case NOX_DTYPE_BOOL:                                                                     |    853
   854       |         case NOX_DTYPE_ZONED: {                                                                  |    854
   855       |            pMethodParm->graphDataType = LITERAL;                                                 |    855
   856       |            break;                                                                                |    856
   857       |         }                                                                                        |    857
   858       |         case NOX_DTYPE_PACKED: {                                                                 |    858
   859       |            pMethodParm->graphDataType = LITERAL;                                                 |    859
   860       |            pMethodParm->size = pMethodParm->length / 2 + 1;                                      |    860
   861       |            break;                                                                                |    861
   862       |         }                                                                                        |    862
   863       |         case NOX_DTYPE_DATE:  {                                                                  |    863
   864       |            strcpy ( pMethodParm->format , parmMetaValue ( pParmMeta, "dateformat"));             |    864
   865       |            pMethodParm->graphDataType = VALUE;                                                   |    865
   866       |            pMethodParm->separatorChar = convertSeperator(                                        |    866
   867       |               parmMetaValue ( pParmMeta, "dateseparator")                                        |    867
   868       |            );                                                                                    |    868
   869       |            pMethodParm->length = pMethodParm->size  = 10 ; // TODO More?                         |    869
   870       |            break;                                                                                |    870
   871       |         }                                                                                        |    871
   872       |                                                                                                  |    872
   873       |         case NOX_DTYPE_TIME:  {                                                                  |    873
   874       |            strcpy ( pMethodParm->format , parmMetaValue ( pParmMeta, "timeformat"));             |    874
   875       |            pMethodParm->graphDataType = VALUE;                                                   |    875
   876       |            pMethodParm->separatorChar = convertSeperator(                                        |    876
   877       |               parmMetaValue ( pParmMeta, "timeseparator")                                        |    877
   878       |            );                                                                                    |    878
   879       |            pMethodParm->length = pMethodParm->size = 8 ;                                         |    879
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          26
   880       |            break;                                                                                |    880
   881       |         }                                                                                        |    881
   882       |         case NOX_DTYPE_TIME_STAMP: {                                                             |    882
   883       |            if ( *parmMetaValue ( pParmMeta, "precision") == '\0') {                              |    883
   884       |               pMethodParm->precision = 6;                                                        |    884
   885       |            }                                                                                     |    885
   886       |            pMethodParm->length = 20 + pMethodParm->precision;                                    |    886
   887       |            pMethodParm->size = pMethodParm->length;                                              |    887
   888       |            break;                                                                                |    888
   889       |         }                                                                                        |    889
   890       |                                                                                                  |    890
   891       |         default:                                                                                 |    891
   892       |            pMethodParm->graphDataType = VALUE;                                                   |    892
   893       |      }                                                                                           |    893
   894       |                                                                                                  |    894
   895       |      pMethodParm->offset = *offset;                                                              |    895
   896       |                                                                                                  |    896
   897       |      pParm = buildMethodParmObject (pMethodParm);                                                |    897
   898       |                                                                                                  |    898
   899       |      // Setup for next iteration                                                                 |    899
   900       |      LONG totSize = pMethodParm->dim > 0 ? pMethodParm->size * pMethodParm->dim : pMethodParm->s\|    900
   900       |ize;                                                                                              |    900
   901       |      *offset += totSize;                                                                         |    901
   902       |      *size   += totSize;                                                                         |    902
   903       |                                                                                                  |    903
   904       |                                                                                                  |    904
   905       |      nox_ArrayPush ( pParms , pParm , FALSE);                                                    |    905
   906       |                                                                                                  |    906
   907       |      pParmMeta = nox_GetNodeNext(pParmMeta);                                                     |    907
   908       |   }                                                                                              |    908
   909       |   return pParms;                                                                                 |    909
   910       |}                                                                                                 |    910
   911       |#pragma convert(0)                                                                                |    911
   912       |                                                                                                  |    912
   913       |/* --------------------------------------------------------------------------- *\                 |    913
   914       |   Load all complex (if any) datatypes and make a __structs__ node                                |    914
   915       |\* --------------------------------------------------------------------------- */                 |    915
   916       |#pragma convert(1252)                                                                             |    916
   917       |static void buildStructures ( PNOXNODE pProgram , PNOXNODE pPcml)                                 |    917
   918       |{                                                                                                 |    918
   919       |   PNOXNODE pPcmlStruct = nox_GetNode  (pPcml , "/pcml/struct");                                  |    919
   920       |   if (pPcmlStruct) {                                                                             |    920
   921       |                                                                                                  |    921
   922       |      PNOXNODE pStructs  = nox_NewObject(NULL);                                                   |    922
   923       |                                                                                                  |    923
   924       |      while ( pPcmlStruct && 0==strcmp(nox_GetNodeNamePtr(pPcmlStruct),"struct")) {               |    924
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          27
   925       |         PUCHAR  structureName = parmMetaValue ( pPcmlStruct, "name");                            |    925
   926       |         LONG   offset = 0;                                                                       |    926
   927       |         LONG   size   = 0;                                                                       |    927
   928       |         PNOXNODE pElements = buildParmElements(pPcmlStruct , pStructs , &offset, &size, pProgram\|    928
   928       |);                                                                                                |    928
   929       |         nox_SetNodeAttrValueInt (pElements , "size", size);                                      |    929
   930       |         nox_NodeMoveInto (pStructs, structureName, pElements );                                  |    930
   931       |         pPcmlStruct = nox_GetNodeNext(pPcmlStruct);                                              |    931
   932       |      }                                                                                           |    932
   933       |      nox_NodeMoveInto (pProgram, "__structs__", pStructs );                                      |    933
   934       |   }                                                                                              |    934
   935       |}                                                                                                 |    935
   936       |#pragma convert(0)                                                                                |    936
   937       |/* --------------------------------------------------------------------------- *\                 |    937
   938       |   Load all program/procedure entry points                                                        |    938
   939       |\* --------------------------------------------------------------------------- */                 |    939
   940       |#pragma convert(1252)                                                                             |    940
   941       |static void buildParameters ( PNOXNODE pProgram , PNOXNODE pPcml , BOOL isProgram )               |    941
   942       |{                                                                                                 |    942
   943       |                                                                                                  |    943
   944       |   PNOXNODE pPcmlProgram = nox_GetNode (pPcml , "/pcml/program");                                 |    944
   945       |   PNOXNODE pStructs     = nox_GetNode (pProgram ,  "__structs__");                               |    945
   946       |                                                                                                  |    946
   947       |   while (pPcmlProgram && 0==strcmp(nox_GetNodeNamePtr(pPcmlProgram),"program")) {                |    947
   948       |      LONG    offset = 0;                                                                         |    948
   949       |      LONG    size   = 0;                                                                         |    949
   950       |      PNOXNODE pParms = buildParmElements(pPcmlProgram , pStructs , &offset, &size, pProgram);    |    950
   951       |                                                                                                  |    951
   952       |      if (isProgram ) { // *PGM                                                                   |    952
   953       |         nox_SetIntByName ( pProgram , "buflen" , size  , OFF);                                   |    953
   954       |         nox_NodeMoveInto ( pProgram , "parms" , pParms);                                         |    954
   955       |      } else {                                                                                    |    955
   956       |         UCHAR tempProc [PROC_NAME_MAX];                                                          |    956
   957       |         PNOXNODE pProcedure    = nox_NewObject(NULL);                                            |    957
   958       |         PUCHAR  procedureName  = parmMetaValue ( pPcmlProgram, "name");                          |    958
   959       |         nox_SetIntByName ( pProcedure , "buflen" , size , OFF);                                  |    959
   960       |         nox_NodeMoveInto ( pProcedure , "parms"  , pParms);                                      |    960
   961       |         strtrimncpy ( tempProc , procedureName , PROC_NAME_MAX);                                 |    961
   962       |         nox_NodeMoveInto ( pProgram , tempProc, pProcedure);                                     |    962
   963       |      }                                                                                           |    963
   964       |                                                                                                  |    964
   965       |      pPcmlProgram = nox_GetNodeNext(pPcmlProgram);                                               |    965
   966       |                                                                                                  |    966
   967       |   }                                                                                              |    967
   968       |}                                                                                                 |    968
   969       |#pragma convert(0)                                                                                |    969
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          28
   970       |/* --------------------------------------------------------------------------- *\                 |    970
   971       |   Convert pcml to uniform json used for both programs and service programs                       |    971
   972       |\* --------------------------------------------------------------------------- */                 |    972
   973       |PNOXNODE  nox_ApplicationMeta ( PUCHAR library , PUCHAR program , PUCHAR objectType)              |    973
   974       |{                                                                                                 |    974
   975       |   PNOXNODE pPcml;                                                                                |    975
   976       |   UCHAR   tempPgm [11];                                                                          |    976
   977       |   UCHAR   tempLib [11];                                                                          |    977
   978       |   BOOL    isProgram = objectType[1] == 'P';                                                      |    978
   979       |                                                                                                  |    979
   980       |   if (isProgram) {                                                                               |    980
   981       |      if ( *library == '*' ) {                                                                    |    981
   982       |         _SYSPTR pPgm = nox_loadProgram (library, program);                                       |    982
   983       |         getLibraryForSysPtr ( pPgm , library);                                                   |    983
   984       |      }                                                                                           |    984
   985       |      pPcml = nox_ProgramMeta ( library , program );                                              |    985
   986       |   } else {                                                                                       |    986
   987       |      if ( *library == '*' ) {                                                                    |    987
   988       |         _SYSPTR pPgm = nox_loadServiceProgram (library, program);                                |    988
   989       |         getLibraryForSysPtr ( pPgm , library);                                                   |    989
   990       |      }                                                                                           |    990
   991       |      pPcml = nox_ProcedureMeta ( library , program , "*ALL");                                    |    991
   992       |   }                                                                                              |    992
   993       |                                                                                                  |    993
   994       |   if (pPcml == NULL ) return NULL;                                                               |    994
   995       |                                                                                                  |    995
   996       |   // TODO : for now return null, but let a object with out PCML make a default graph for caching |    996
   997       |   #pragma convert(1252)                                                                          |    997
   998       |   PNOXNODE pPcmlProgram = nox_GetNode  (pPcml , "/pcml/program");                                |    998
   999       |   #pragma convert(0)                                                                             |    999
  1000       |   if (pPcmlProgram == NULL) {                                                                    |   1000
  1001       |      nox_NodeDelete (pPcml);                                                                     |   1001
  1002       |      return NULL;                                                                                |   1002
  1003       |   }                                                                                              |   1003
  1004       |                                                                                                  |   1004
  1005       |   PNOXNODE pResultObject = nox_NewObject(NULL);                                                  |   1005
  1006       |   PNOXNODE pLib          = nox_NewObject(NULL);                                                  |   1006
  1007       |   PNOXNODE pObjectType   = nox_NewObject(NULL);                                                  |   1007
  1008       |   PNOXNODE pProgram      = nox_NewObject(NULL);                                                  |   1008
  1009       |                                                                                                  |   1009
  1010       |   buildStructures ( pProgram , pPcml);                                                           |   1010
  1011       |   buildParameters ( pProgram , pPcml , isProgram);                                               |   1011
  1012       |                                                                                                  |   1012
  1013       |                                                                                                  |   1013
  1014       |   strtrimncpy ( tempPgm  , program , 10);                                                        |   1014
  1015       |   strtrimncpy ( tempLib  , library , 10);                                                        |   1015
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          29
  1016       |   nox_NodeMoveInto ( pObjectType   , tempPgm , pProgram);                                        |   1016
  1017       |   #pragma convert(1252)                                                                          |   1017
  1018       |   nox_NodeMoveInto ( pLib          , isProgram ? "program" : "service" , pObjectType);           |   1018
  1019       |   #pragma convert(0)                                                                             |   1019
  1020       |   nox_NodeMoveInto ( pResultObject , tempLib , pLib);                                            |   1020
  1021       |   nox_NodeDelete (pPcml);                                                                        |   1021
  1022       |                                                                                                  |   1022
  1023       |                                                                                                  |   1023
  1024       |   return pResultObject;                                                                          |   1024
  1025       |                                                                                                  |   1025
  1026       |}                                                                                                 |   1026
  1027       |                                                                                                  |   1027
  1028       |                                                                                                  |   1028
  1029       |/* --------------------------------------------------------------------------- *\                 |   1029
  1030       |    Handler :                                                                                     |   1030
  1031       |\* --------------------------------------------------------------------------- */                 |   1031
  1032       |PNOXNODE  nox_CallProgram (PUCHAR library , PUCHAR program, PNOXNODE parmsP, ULONG optionsP)      |   1032
  1033       |{                                                                                                 |   1033
  1034       |                                                                                                  |   1034
  1035       |   PNPMPARMLISTADDRP pParms = _NPMPARMLISTADDR();                                                 |   1035
  1036       |   PNOXNODE parms   = (pParms->OpDescList->NbrOfParms >= 3 ) ? parmsP : NULL;                     |   1036
  1037       |   ULONG   options = (pParms->OpDescList->NbrOfParms >= 4 ) ? optionsP : 0;                       |   1037
  1038       |   JXMETHOD pgm;                                                                                  |   1038
  1039       |                                                                                                  |   1039
  1040       |   memset ( &pgm , 0 , sizeof(pgm));                                                              |   1040
  1041       |   strtrimncpy (pgm.library   , library , 10);                                                    |   1041
  1042       |   strtrimncpy (pgm.program   , program  , 10);                                                   |   1042
  1043       |   strtrimncpy (pgm.procedure , "*PGM" , PROC_NAME_MAX );                                         |   1043
  1044       |   pgm.userMethod = nox_loadProgram ( pgm.library, pgm.program);                                  |   1044
  1045       |   pgm.pMetaNode  = nox_ApplicationMeta (pgm.library , pgm.program , pgm.procedure );             |   1045
  1046       |   pgm.userMethodIsProgram = TRUE;                                                                |   1046
  1047       |   pgm.pLib  = nox_GetNode(pgm.pMetaNode , pgm.library);                                          |   1047
  1048       |   #pragma convert(1252)                                                                          |   1048
  1049       |   pgm.pPgm  = nox_GetNode(nox_GetNode(pgm.pLib , "program") , pgm.program);                      |   1049
  1050       |   #pragma convert(0)                                                                             |   1050
  1051       |   pgm.pProc = NULL;                                                                              |   1051
  1052       |                                                                                                  |   1052
  1053       |   PNOXNODE pResult = call (&pgm, parms , options);                                               |   1053
  1054       |   nox_NodeDelete( pgm.pMetaNode );                                                               |   1054
  1055       |   return pResult;                                                                                |   1055
  1056       |}                                                                                                 |   1056
  1057       |/* --------------------------------------------------------------------------- *\                 |   1057
  1058       |    Handler :                                                                                     |   1058
  1059       |\* --------------------------------------------------------------------------- */                 |   1059
  1060       |PNOXNODE  nox_CallProcedure (PUCHAR library, PUCHAR srvPgm, PUCHAR procedure, PNOXNODE parmsP, UL\|   1060
  1060       |ONG optionsP)                                                                                     |   1060
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          30
  1061       |{                                                                                                 |   1061
  1062       |                                                                                                  |   1062
  1063       |   PNPMPARMLISTADDRP pParms = _NPMPARMLISTADDR();                                                 |   1063
  1064       |   PNOXNODE parms   = (pParms->OpDescList->NbrOfParms >= 4 ) ? parmsP : NULL;                     |   1064
  1065       |   ULONG   options = (pParms->OpDescList->NbrOfParms >= 5 ) ? optionsP : 0;                       |   1065
  1066       |   JXMETHOD pgm;                                                                                  |   1066
  1067       |                                                                                                  |   1067
  1068       |   memset ( &pgm , 0 , sizeof(pgm));                                                              |   1068
  1069       |   strtrimncpy (pgm.library   , library , 10);                                                    |   1069
  1070       |   strtrimncpy (pgm.program   , srvPgm , 10);                                                     |   1070
  1071       |   strtrimncpy (pgm.procedure , procedure , PROC_NAME_MAX );                                      |   1071
  1072       |                                                                                                  |   1072
  1073       |   pgm.userMethod = nox_loadServiceProgramProc ( pgm.library, pgm.program , pgm.procedure);       |   1073
  1074       |   pgm.pMetaNode  = nox_ApplicationMeta (pgm.library , pgm.program , pgm.procedure );             |   1074
  1075       |   pgm.userMethodIsProgram = FALSE;                                                               |   1075
  1076       |   pgm.pLib  = nox_GetNode(pgm.pMetaNode , pgm.library);                                          |   1076
  1077       |   #pragma convert(1252)                                                                          |   1077
  1078       |   pgm.pPgm  = nox_GetNode(nox_GetNode(pgm.pLib , "service") , pgm.program);                      |   1078
  1079       |   #pragma convert(0)                                                                             |   1079
  1080       |   pgm.pProc = nox_GetNode(pgm.pPgm      , pgm.procedure);                                        |   1080
  1081       |                                                                                                  |   1081
  1082       |   PNOXNODE pResult = call (&pgm, parms , options);                                               |   1082
  1083       |   nox_NodeDelete( pgm.pMetaNode);                                                                |   1083
  1084       |   return pResult;                                                                                |   1084
  1085       |}                                                                                                 |   1085
                                          * * * * *   E N D   O F   S O U R C E   * * * * *
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          31
                                               * * * * *   I N C L U D E S   * * * * *
 INCNBR  Include Name                     Last change        Actual Include Name
     1   QLEAWI.h                         04-10-15 09:51:52  /QIBM/include/QLEAWI.h
     2   pointer.h                        04-10-15 09:42:02  /QIBM/include/pointer.h
     3   qusec.h                          04-10-15 09:52:16  /QIBM/include/qusec.h
     4   signal.h                         04-10-15 09:42:06  /QIBM/include/signal.h
     5   except.h                         04-10-15 09:42:03  /QIBM/include/except.h
     6   milib.h                          04-10-15 09:42:00  /QIBM/include/milib.h
     7   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
     8   mih/miobjtyp.h                   04-10-15 10:02:16  /QIBM/include/mih/miobjtyp.h
     9   sys/types.h                      04-10-15 10:01:46  /QIBM/include/sys/types.h
    10   string.h                         04-10-15 09:42:06  /QIBM/include/string.h
    11   time.h                           04-10-15 09:42:12  /QIBM/include/time.h
    12   p_time.h                         04-10-15 09:42:05  /QIBM/include/p_time.h
    13   mih/stsppo.h                     04-10-15 10:00:53  /QIBM/include/mih/stsppo.h
    14   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    15   mih/setsppo.h                    04-10-15 09:59:47  /QIBM/include/mih/setsppo.h
    16   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    17   mih/MIDTTM.h                     04-10-15 10:02:46  /QIBM/include/mih/MIDTTM.h
    18   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    19   mih/matptr.h                     04-10-15 10:00:33  /QIBM/include/mih/matptr.h
    20   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    21   qwtsetp.h                        04-10-15 09:51:43  /QIBM/include/qwtsetp.h
    22   miptrnam.h                       04-10-15 09:42:10  /QIBM/include/miptrnam.h
    23   milib.h                          04-10-15 09:42:00  /QIBM/include/milib.h
    24   mih/cmpptra.h                    04-10-15 10:00:53  /QIBM/include/mih/cmpptra.h
    25   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    26   mih/cmpptrt.h                    04-10-15 10:01:36  /QIBM/include/mih/cmpptrt.h
    27   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    28   mih/rslvsp.h                     04-10-15 10:01:30  /QIBM/include/mih/rslvsp.h
    29   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    30   qsygetph.h                       04-10-15 09:51:47  /QIBM/include/qsygetph.h
    31   qbnrpii.h                        04-10-15 10:00:32  /QIBM/include/qbnrpii.h
    32   mih/callpgmv.h                   04-10-15 10:03:25  /QIBM/include/mih/callpgmv.h
    33   mih/micommon.h                   04-10-15 10:00:42  /QIBM/include/mih/micommon.h
    34   errno.h                          04-10-15 09:42:26  /QIBM/include/errno.h
    35   stdio.h                          04-10-15 09:42:48  /QIBM/include/stdio.h
    36   ifs.h                            04-10-15 09:42:13  /QIBM/include/ifs.h
    37   wctype.h                         04-10-15 09:41:55  /QIBM/include/wctype.h
    38   qp0lstdi.h                       04-10-15 09:52:19  /QIBM/include/qp0lstdi.h
    39   sys/types.h                      04-10-15 10:01:46  /QIBM/include/sys/types.h
    40   qlg.h                            04-10-15 09:51:29  /QIBM/include/qlg.h
    41   qp0lscan.h                       04-10-15 10:00:32  /QIBM/include/qp0lscan.h
    42   ostypes.h                        06-12-18 23:20:34  /prj/noxDbUTF8/ext/include/ostypes.h
    43   decimal.h                        04-10-15 09:42:11  /QIBM/include/decimal.h
    44   apierr.h                         12-11-18 18:09:21  /prj/noxDbUTF8/ext/include/apierr.h
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          32
    45   parms.h                          12-11-18 18:09:21  /prj/noxDbUTF8/ext/include/parms.h
    46   trycatch.h                       12-11-18 18:09:21  /prj/noxDbUTF8/ext/include/trycatch.h
                                       * * * * *   E N D   O F   I N C L U D E S   * * * * *
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          33
                                               * * * * *   M E S S A G E S   * * * * *
 MSG ID      SEV     TEXT
                     <SEQNBR>-<FILE NO>:<FILE LINE NO>
 CZM0296     30      #include file  not found.
                      ( 30-0:30, 31-0:31, 33-0:33 )
 CZM0046     30      Syntax error.
                      ( 40-0:40, 216-0:215, 283-0:281, 298-0:296 )
 CZM0224     10      Incorrect pragma ignored.
                      ( 118-0:118, 133-0:133, 135-0:135, 152-0:152, 154-0:154, 161-0:161, 163-0:163, 180-0:180,
                        207-0:207, 212-0:212, 214-0:214, 278-0:278, 280-0:280, 286-0:286, 289-0:289, 294-0:294,
                        349-0:349, 375-0:375 )
 CZM0304     10      No function prototype given for "".
                      ( 140-0:139, 149-0:148, 158-0:157, 185-0:184, 185-0:184, 195-0:194, 195-0:194, 197-0:196,
                        226-0:224, 242-0:240, 246-0:244, 250-0:248, 254-0:252, 285-0:283, 312-0:308, 316-0:312,
                        319-0:315 )
 CZM0275     30      Unexpected text  encountered.
                      ( 183-0:182, 183-0:182, 193-0:192, 193-0:192, 193-0:192, 211-0:210 )
 CZM0045     30      Undeclared identifier .
                      ( 185-0:184, 195-0:194, 211-0:210, 219-0:218, 220-0:219, 230-0:228, 241-0:239, 245-0:243,
                        249-0:247, 253-0:251, 257-0:255, 261-0:259, 266-0:264, 271-0:269, 275-0:273, 285-0:283,
                        285-0:283, 302-0:299, 303-0:300, 308-0:304, 310-0:306, 310-0:306, 325-0:321 )
 CZM0196     30      Initialization between types "" and "" is not allowed.
                      ( 185-0:184, 195-0:194, 316-0:312 )
 CZM0166     30      Definition of function  requires parentheses.
                      ( 209-0:208 )
 CZM0276     30      Syntax error: possible missing ?
                      ( 209-0:208 )
 CZM0051     30      Case expression must be a valid integral constant.
                      ( 220-0:219, 230-0:228, 241-0:239, 245-0:243, 249-0:247, 253-0:251, 257-0:255, 261-0:259,
                        266-0:264, 271-0:269, 275-0:273 )
 CZM0099     30      Unexpected argument.
                      ( 286-0:284, 317-0:313 )
 CZM0277     30      Syntax error: possible missing  or ?
                      ( 303-0:300, 307-0:303, 323-0:319 )
                                       * * * * *   E N D   O F   M E S S A G E S   * * * * *
 5770WDS V7R3M0  160422   IBM ILE C compiler      loadpgm.c                          DKSRV206    06-09-25 23:21:00 Page          34
                                        * * * * *   M E S S A G E   S U M M A R Y   * * * * *
       Total      Informational(00)      Warning(10)      Error(20)      Severe Error(30)      Unrecoverable Error(40)
        92              0                   35               0                 57                        0
                                * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
 Module LOADPGM is not created because statement errors occurred.
                                    * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
